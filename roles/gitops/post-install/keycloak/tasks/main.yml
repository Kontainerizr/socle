---
- name: Get Keycloak admin password secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: keycloak
  register: kc_adm_pass_secret

- name: Set Keycloak admin password secret
  when: kc_adm_pass_secret.resources | length == 0
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        admin-password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') | b64encode }}"
      metadata:
        name: keycloak
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Check Keycloak helm release
  kubernetes.core.helm_info:
    name: keycloak
    namespace: "{{ dsc.keycloak.namespace }}"
  register: kc_helm_release

- name: Reset Keycloak admin password
  when: >
    kc_helm_release.status is defined and
    kc_adm_pass_secret.resources | length == 0
  block:
    - name: Get Keycloak primary BDD pod
      kubernetes.core.k8s_info:
        kind: Pod
        label_selectors:
          - "cnpg.io/cluster=pg-cluster-keycloak"
          - "cnpg.io/instanceRole=primary"
      register: kc_bdd_pod

    - name: Get Keycloak admin ID from database
      kubernetes.core.k8s_exec:
        pod: "{{ kc_bdd_pod.resources[0].metadata.name }}"
        namespace: "{{ dsc.keycloak.namespace }}"
        command: >
          psql -U postgres -d keycloak --csv -c "\x" -c "select id from user_entity where username = 'admin';"
      register: kc_admin_id

    - name: Set kc_admin_id fact
      ansible.builtin.set_fact:
        kc_admin_id: "{{ kc_admin_id.stdout | regex_search('^id.*', multiline=True) | regex_search('id,(.+)', '\\1') | first }}"

    - name: Delete Keycloak admin in database
      kubernetes.core.k8s_exec:
        pod: "{{ kc_bdd_pod.resources[0].metadata.name }}"
        namespace: "{{ dsc.keycloak.namespace }}"
        command: >
          psql -U postgres -d keycloak -c "delete from credential where user_id = '"{{ kc_admin_id }}"';"
          -c "delete from user_role_mapping where user_id = '"{{ kc_admin_id }}"';"
          -c "delete from user_entity where id = '"{{ kc_admin_id }}"';"
          -c "delete from user_required_action where user_id = '"{{ kc_admin_id }}"';"

    - name: Restart Keycloak pods to reset admin password
      kubernetes.core.k8s:
        kind: Pod
        namespace: "{{ dsc.keycloak.namespace }}"
        label_selectors:
          - "app.kubernetes.io/component=keycloak"
          - "app.kubernetes.io/instance=keycloak"
        state: absent

    - name: Wait Keycloak URL
      ansible.builtin.uri:
        url: https://{{ keycloak_domain }}
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        method: GET
        status_code: [200, 202]
        return_content: false
      register: kc_response
      until: kc_response is not failed
      retries: 30
      delay: 5

- name: Wait Keycloak URL
  ansible.builtin.uri:
    url: https://{{ keycloak_domain }}
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    method: GET
    status_code: [200, 202]
    return_content: false
  register: kc_response
  until: kc_response is not failed
  retries: 30
  delay: 5

- name: Get Keycloak admin password
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: keycloak
  register: kc_adm_pass

- name: Set Keycloak admin name fact
  ansible.builtin.set_fact:
    keycloak_admin_password: "{{ kc_adm_pass.resources[0].data['admin-password'] | b64decode }}"
    keycloak_admin: admin

- name: Update console inventory
  kubernetes.core.k8s:
    kind: Secret
    name: dso-config
    namespace: "{{ dsc.console.namespace }}"
    state: patched
    definition:
      data:
        KEYCLOAK_ADMIN_PASSWORD: "{{ keycloak_admin_password | b64encode }}"
        KEYCLOAK_ADMIN: "{{ keycloak_admin | b64encode }}"

- name: Get Keycloak API token
  ansible.builtin.uri:
    url: https://{{ keycloak_domain }}/realms/master/protocol/openid-connect/token
    method: POST
    status_code: [200, 202]
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    return_content: true
    body: username={{ keycloak_admin }}&password={{ keycloak_admin_password }}&grant_type=password&client_id=admin-cli
  register: kc_token

- name: Set kc_access_token fact
  ansible.builtin.set_fact:
    kc_access_token: "{{ kc_token.json.access_token }}"

- name: Create dso realm
  community.general.keycloak_realm:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    id: dso
    realm: dso
    display_name: Dso Realm
    loginWithEmailAllowed: true
    registration_email_as_username: false
    loginTheme: DSFR
    accountTheme: DSFR
    adminTheme: DSFR
    emailTheme: DSFR
    internationalizationEnabled: true
    supportedLocales:
      - en
      - fr
    defaultLocale: fr
    password_policy: >
      length(15) and lowerCase(1) and upperCase(1) and specialChars(1) and digits(1) and
      passwordHistory(2) and notUsername() and forceExpiredPasswordChange(183)
    enabled: true

- name: Create base admins groups
  community.general.keycloak_group:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    name: "{{ item }}"
  with_items:
    - admin
    - ArgoCDAdmins

- name: Get keycloak dso realm users from API
  ansible.builtin.uri:
    url: https://{{ keycloak_domain }}/admin/realms/dso/users
    method: GET
    status_code: [200, 202]
    return_content: true
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    body_format: json
    headers:
      Authorization: bearer {{ kc_access_token }}
  register: kc_dso_users

- name: Find dso admin secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: dso-admin-user-secret
  register: dso_admin_secret

- name: Create dso admin secret and user
  when: >
    (dso_admin_secret.resources | length == 0) or
    (kc_dso_users.json | selectattr('username', 'equalto', dso_admin_secret.resources[0].data.ADMIN_USER|b64decode) | length == 0)
  block:
    - name: Generate admin user password
      ansible.builtin.set_fact:
        admin_user_password: "{{ lookup('community.general.random_string', length=16, min_lower=1, min_upper=1, min_special=1, min_numeric=1) }}"

    - name: Create dso secret
      kubernetes.core.k8s:
        definition:
          kind: Secret
          metadata:
            namespace: "{{ dsc.keycloak.namespace }}"
            name: dso-admin-user-secret
          data:
            ADMIN_USER: "{{ 'admin@example.com' | b64encode }}"
            ADMIN_USER_PASSWORD: "{{ admin_user_password | b64encode }}"
          type: Opaque

    - name: Remove dso admin user
      community.general.keycloak_user:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        auth_client_id: admin-cli
        auth_keycloak_url: https://{{ keycloak_domain }}
        auth_realm: master
        auth_username: "{{ keycloak_admin }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: absent
        realm: dso
        username: admin@example.com

    - name: Create dso admin user
      community.general.keycloak_user:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        auth_client_id: admin-cli
        auth_keycloak_url: https://{{ keycloak_domain }}
        auth_realm: master
        auth_username: "{{ keycloak_admin }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        realm: dso
        credentials:
          - temporary: false
            type: password
            value: "{{ admin_user_password }}"
        username: admin@example.com
        first_name: Admin
        last_name: Admin
        email: admin@example.com
        enabled: true
        email_verified: true
        groups:
          - name: admin
            state: present
          - name: ArgoCDAdmins
            state: present
#        force: true # Ne fonctionne pas quand user supprimé via l'interface graphique et tâche relancée.

- name: Get dso keycloak client scopes from API
  ansible.builtin.uri:
    url: https://{{ keycloak_domain }}/admin/realms/dso/client-scopes
    method: GET
    status_code: [200, 202]
    return_content: true
    body_format: json
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    headers:
      Authorization: bearer {{ kc_access_token }}
  register: kc_client_scopes

- name: Create generic keycloak client scope
  when: kc_client_scopes.json | selectattr('name', 'equalto', 'generic') | length == 0
  community.general.keycloak_clientscope:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    name: generic
    realm: dso
    description: Generic client scope
    protocol: openid-connect
    attributes:
      include.in.token.scope: true
      display.on.consent.screen: true
      gui.order: ""
      consent.screen.text: ""
    protocolMappers: "{{ lookup('ansible.builtin.file', 'generic-client-scope-protocolMappers.yaml') | from_yaml }}"

- name: Create clients
  ansible.builtin.include_tasks:
    file: client.yaml
  with_items: "{{ keycloak_clients }}"

- name: Enable brute force detection
  community.general.keycloak_realm:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: "{{ item }}"
    brute_force_protected: true
    failure_factor: 10
  with_items:
    - master
    - dso

- name: Set OTP policy algorithm in dso realm
  community.general.keycloak_realm:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    otp_policy_algorithm: SHA256

- name: Patch serviceMonitors
  when: >
    dsc.global.metrics.enabled and
    dsc.global.metrics.additionalLabels is defined
  block:
    - name: Get serviceMonitors
      kubernetes.core.k8s_info:
        api_version: monitoring.coreos.com/v1
        kind: ServiceMonitor
        namespace: "{{ dsc.keycloak.namespace }}"
      register: service_monitors

    - name: Get service_monitors names
      ansible.builtin.set_fact:
        service_monitors_names: "{{ service_monitors.resources | map(attribute='metadata.name') }}"

    - name: Patch serviceMonitors
      kubernetes.core.k8s:
        kind: ServiceMonitor
        namespace: "{{ dsc.keycloak.namespace }}"
        state: patched
        name: "{{ item }}"
        definition:
          metadata:
            labels:
              "{{ dsc.global.metrics.additionalLabels }}"
      loop: "{{ service_monitors_names }}"

- name: Patch podMonitors
  when: >
    dsc.global.metrics.enabled and
    dsc.global.metrics.additionalLabels is defined
  block:
    - name: Get podMonitors
      kubernetes.core.k8s_info:
        api_version: monitoring.coreos.com/v1
        kind: PodMonitor
        namespace: "{{ dsc.keycloak.namespace }}"
      register: pod_monitors

    - name: Get pod_monitors names
      ansible.builtin.set_fact:
        pod_monitors_names: "{{ pod_monitors.resources | map(attribute='metadata.name') }}"

    - name: Patch podMonitors
      kubernetes.core.k8s:
        kind: PodMonitor
        namespace: "{{ dsc.keycloak.namespace }}"
        state: patched
        name: "{{ item }}"
        definition:
          metadata:
            labels:
              "{{ dsc.global.metrics.additionalLabels }}"
      loop: "{{ pod_monitors_names }}"
